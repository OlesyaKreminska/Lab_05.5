#include <iostream>
using namespace std;

// Функція для обчислення n-го члена арифметичної прогресії
int nthTerm(int a1, int d, int n) {
    if (n == 1)
        return a1; // Базовий випадок: перший член
    return nthTerm(a1, d, n - 1) + d; // Рекурентне співвідношення
}

// Функція для обчислення суми перших n членів арифметичної прогресії
int sumAP(int a1, int d, int n) {
    if (n == 1)
        return a1; // Базовий випадок: сума одного члена — це сам член
    return sumAP(a1, d, n - 1) + nthTerm(a1, d, n); // Рекурентне співвідношення
}

// Функція для обчислення глибини рекурсії
int recursionDepth(int n) {
    if (n == 1)
        return 1; // Базовий випадок
    return recursionDepth(n - 1) + 1; // Рекурентне співвідношення для глибини
}

int main() {
    int a1, d, n;

    cout << "Введіть перший член арифметичної прогресії (a1): ";
    cin >> a1;
    cout << "Введіть різницю арифметичної прогресії (d): ";
    cin >> d;
    cout << "Введіть номер члена прогресії (n): ";
    cin >> n;

    // Обчислення n-го члена прогресії
    int nth = nthTerm(a1, d, n);
    cout << n << "-й член арифметичної прогресії: " << nth << endl;

    // Обчислення суми перших n членів прогресії
    int sum = sumAP(a1, d, n);
    cout << "Сума перших " << n << " членів арифметичної прогресії: " << sum << endl;

    // Обчислення глибини рекурсії
    int depth = recursionDepth(n);
    cout << "Глибина рекурсії: " << depth << endl;

    return 0;
}